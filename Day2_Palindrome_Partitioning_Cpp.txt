// Given a string s, partition s such that every 
// substring
//  of the partition is a 
// palindrome
// . Return all possible palindrome partitioning of s.

 

// Example 1:

// Input: s = "aab"
// Output: [["a","a","b"],["aa","b"]]
// Example 2:

// Input: s = "a"
// Output: [["a"]]
 

// Constraints:

// 1 <= s.length <= 16
// s contains only lowercase English letters.


//Topics
//String
//Dynamic Programming
//Backtracking


// Solution:

class Solution {
public:
    bool ispal(string s,int start,int end){
        while(start<end){
            if(s[start]!=s[end]){
                return false;
            }
            start++;end--;
        }
        return true;
    }
    void solve(int ind, string s,vector<string> &temp,vector<vector<string>> &ans){
        if(ind>=s.length()){
            ans.push_back(temp);
            return;
        }
        for(int i=ind;i<s.length();i++){
            if(ispal(s,ind,i)){
                temp.push_back(s.substr(ind,i- ind+ 1));
                solve(i+ 1,s,temp,ans);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        solve(0,s,temp,ans);
        return ans;

    }
};